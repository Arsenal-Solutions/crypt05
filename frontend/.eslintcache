[{"/home/achen/IdeaProjects/crypt05/frontend/src/index.js":"1","/home/achen/IdeaProjects/crypt05/frontend/src/serviceWorker.js":"2","/home/achen/IdeaProjects/crypt05/frontend/src/App.jsx":"3","/home/achen/IdeaProjects/crypt05/frontend/src/components/Signup/Signup.js":"4","/home/achen/IdeaProjects/crypt05/frontend/src/components/Login/Login.jsx":"5","/home/achen/IdeaProjects/crypt05/frontend/src/components/TransferPage/TransferPage.tsx":"6","/home/achen/IdeaProjects/crypt05/frontend/src/components/CodePage/CodePage.tsx":"7","/home/achen/IdeaProjects/crypt05/frontend/src/components/ScanCodePage/ScanCodePage.tsx":"8","/home/achen/IdeaProjects/crypt05/frontend/src/components/Scanner/Scanner.tsx":"9"},{"size":568,"mtime":1632597771286,"results":"10","hashOfConfig":"11"},{"size":5086,"mtime":1632597771286,"results":"12","hashOfConfig":"11"},{"size":922,"mtime":1632621338554,"results":"13","hashOfConfig":"11"},{"size":2755,"mtime":1632619699268,"results":"14","hashOfConfig":"11"},{"size":3611,"mtime":1632619699260,"results":"15","hashOfConfig":"11"},{"size":3904,"mtime":1632622078617,"results":"16","hashOfConfig":"11"},{"size":1373,"mtime":1632620965357,"results":"17","hashOfConfig":"11"},{"size":500,"mtime":1632621812736,"results":"18","hashOfConfig":"11"},{"size":1581,"mtime":1632621081418,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"1izfsv0",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"39"},"/home/achen/IdeaProjects/crypt05/frontend/src/index.js",["45","46","47"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter, Redirect, Route} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n",["48","49"],"/home/achen/IdeaProjects/crypt05/frontend/src/serviceWorker.js",[],"/home/achen/IdeaProjects/crypt05/frontend/src/App.jsx",[],"/home/achen/IdeaProjects/crypt05/frontend/src/components/Signup/Signup.js",["50","51"],"import React, {Component, useState} from 'react';\nimport {Button, FormGroup, FormControl, Alert} from \"react-bootstrap\";\nimport styles from \"./Signup.module.css\";\nimport axios from \"axios\";\nimport {Redirect} from \"react-router-dom\";\n\n\nfunction Signup(){\n    const [email,setEmail] = useState(\"\");\n    const [password,setPassword] = useState(\"\");\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\n    const [error,setError] = useState(\"\");\n    let [valid,setValid] = useState(false);\n\n    function validateForm(){\n        return email.length > 0 && password.length >= 8 && password === confirmPassword;\n    }\n\n    async function handleSubmit(event){\n        event.preventDefault();\n        try {\n            const result = await axios.post('/api/users', {\n                username: email,\n                password: password\n            });\n            const user = result.data;\n            window.localStorage.setItem('user', JSON.stringify(user));\n            setValid(true);\n        }\n        catch(err) {\n            setError(err.response.data.message);\n        }\n    }\n\n    if(valid){\n        return <Redirect to=\"/home\"/>\n    }\n    return (\n        <div className={styles.Register}>\n            <div className={styles.Logo}>\n                <img style={{width: '100%'}} src=\"/Cryp3t05.png\"/>\n            </div>\n            {\n                error ? <Alert variant=\"danger\" className={styles.Login}>{error}</Alert> : <></>\n            }\n            <form onSubmit={handleSubmit}>\n                <FormGroup controlId=\"email\" bsSize=\"large\">\n                    <h4>Email</h4>\n                    <FormControl\n                        autoFocus\n                        type=\"email\"\n                        value={email}\n                        onChange={e => setEmail(e.target.value)}\n                    />\n                </FormGroup>\n                <FormGroup controlId=\"password\" bsSize=\"large\">\n                    <h4>Password</h4>\n                    <FormControl\n                        value={password}\n                        onChange={e => setPassword(e.target.value)}\n                        type=\"password\"\n                    />\n                </FormGroup>\n                <FormGroup controlId=\"password\" bsSize=\"large\">\n                    <h4>ConfirmPassword</h4>\n                    <FormControl\n                        value={confirmPassword}\n                        onChange={e => setConfirmPassword(e.target.value)}\n                        type=\"password\"\n                    />\n                </FormGroup>\n\n                <Button block bsSize=\"large\" disabled={!validateForm()} type=\"submit\">\n                    Sign Up\n                </Button>\n            </form>\n        </div>\n    );\n\n}\n\nexport default Signup;","/home/achen/IdeaProjects/crypt05/frontend/src/components/Login/Login.jsx",["52","53","54"],"import React, {useState} from 'react';\nimport { Button, FormGroup, FormControl, Alert} from \"react-bootstrap\";\nimport styles from './Login.module.css';\nimport {Link, Redirect, Route} from \"react-router-dom\";\nimport axios from 'axios';\nimport ReactDOM from 'react-dom';\nimport GoogleLogin from 'react-google-login';\n\nfunction Login(){\n    const [email,setEmail] = useState(\"\");\n    const [password,setPassword] = useState(\"\");\n    const [error,setError] = useState(\"\");\n    let [valid, setValid] = useState(false);\n\n\n    function validateForm(){\n        return email.length > 0 && password.length >= 8;\n    }\n\n    async function handleSubmit(event){\n        event.preventDefault();\n        try {\n            const result = await axios.post('/api/users/login', {\n                username: email,\n                password: password\n            });\n            const user = result.data;\n            window.localStorage.setItem('user', JSON.stringify(user));\n            setValid(true);\n        }\n        catch(err) {\n            setError(err.response.data.message);\n        }\n    }\n\n    const responseGoogle = (response) => {\n        console.log(response);\n    }\n\n    if(valid){\n        return <Redirect to=\"/home\"/>\n    }\n        return (\n            <div>\n                <div className={styles.Logo}>\n                    <img style={{width: '100%'}} src=\"/Cryp3t05.png\"/>\n                </div>\n                {\n                    error ? <Alert variant=\"danger\" className={styles.Login}>{error}</Alert> : <></>\n                }\n                <div className={styles.Login}>\n                    <form onSubmit={handleSubmit}>\n                        <FormGroup controlId=\"email\" bsSize=\"large\">\n                            <h4>Email</h4>\n                            <FormControl\n                                autoFocus\n                                type=\"email\"\n                                value={email}\n                                onChange={e => setEmail(e.target.value)}\n                            />\n                        </FormGroup>\n                        <FormGroup controlId=\"password\" bsSize=\"large\">\n                            <h4>Password</h4>\n                            <FormControl\n                                value={password}\n                                onChange={e => setPassword(e.target.value)}\n                                type=\"password\"\n                            />\n                        </FormGroup>\n\n                            <Button block bsSize=\"large\" disabled={!validateForm()} type=\"submit\">\n                                Login\n                            </Button>\n\n                            <div className={styles.signUp}>\n                            <Link to =\"/signUp\">\n                                <Button block bsSize=\"large\" type=\"submit\">\n                                    Sign Up\n                                </Button>\n                            </Link>\n                        </div>\n\n                        <div className = {styles.GoogleLogin}>\n                            <GoogleLogin\n                                clientId=\"97176934286-jivcjar88gvir43f5cetgmetpr3hncqj.apps.googleusercontent.com\"\n                                buttonText=\"Sign in with Google\"\n                                onSuccess={responseGoogle}\n                                onFailure={responseGoogle}\n                                cookiePolicy={'single_host_origin'}\n                            />\n                        </div>\n                    </form>\n                </div>\n            </div>\n\n        );\n\n}\n\nexport default Login;","/home/achen/IdeaProjects/crypt05/frontend/src/components/TransferPage/TransferPage.tsx",["55","56","57","58"],"/home/achen/IdeaProjects/crypt05/frontend/src/components/CodePage/CodePage.tsx",["59"],"import styles from \"./CodePage.module.css\";\nimport {useState, useEffect} from \"react\";\nimport {QRCodeWriter, BarcodeFormat} from \"@zxing/library\";\nimport Jimp from \"jimp\";\n\nfunction CodePage() {\n\n    const [imageUrl, setImageUrl] = useState('');\n\n    useEffect(() => {\n        const address = JSON.parse(window.localStorage.getItem('user') as string).address;\n        const code = new QRCodeWriter().encode(address, BarcodeFormat.QR_CODE, 256, 256, new Map());\n\n        const image = new Jimp(256, 256);\n\n        for (let i = 0; i < code.getWidth(); i++) {\n            for (let j = 0; j < code.getHeight(); j++) {\n                image.setPixelColor(code.get(i, j) ? 0 : 0xffffffff, i, j);\n            }\n        }\n\n        image.getBufferAsync('image/png').then(buff => {\n            const blob = new Blob([buff], {type: 'image/png'});\n            const url = URL.createObjectURL(blob);\n            setImageUrl(url);\n        })\n    }, [])\n\n\n\n    return <div className={styles.container}>\n        <img src={imageUrl} className={styles.code}/>\n\n        <div className={styles.whiteSpace}></div>\n\n        <div className={styles.navBar}>\n            <div>\n                Balance\n            </div>\n            <div>\n                Transfer\n            </div>\n            <div>\n                Your Code\n            </div>\n        </div>\n    </div>\n}\n\nexport default CodePage;",["60","61"],"/home/achen/IdeaProjects/crypt05/frontend/src/components/ScanCodePage/ScanCodePage.tsx",["62","63"],"/home/achen/IdeaProjects/crypt05/frontend/src/components/Scanner/Scanner.tsx",["64"],"import React from 'react';\nimport {BarcodeFormat, BrowserMultiFormatReader, DecodeHintType} from '@zxing/library';\nimport styles from './Scanner.module.css';\n\nexport type ScannerState = {\n    devices: MediaDeviceInfo[]\n}\n\nexport type ScannerProps = {\n    onScan: (value: string) => void,\n    onNoCameraFound?: () => void\n}\n\nclass Scanner extends React.Component<ScannerProps, ScannerState> {\n    state: ScannerState = {\n        devices: []\n    }\n\n    codeReader: BrowserMultiFormatReader;\n\n    constructor(props: any) {\n        super(props);\n        const hints = new Map<DecodeHintType, any>();\n        hints.set(2, [11, 4]);\n        this.codeReader = new BrowserMultiFormatReader();\n    }\n\n    async componentDidMount() {\n        const devices = (await this.codeReader.listVideoInputDevices()).filter(device => device.kind === 'videoinput');\n        this.setState({\n            devices\n        });\n        if (!devices.length) {\n            this.props.onNoCameraFound?.();\n            return;\n        }\n\n        this.codeReader.decodeFromConstraints({\n            video: {\n                facingMode: \"environment\",\n            }\n        }, 'video', (result, error) => {\n            if (result) {\n                this.props.onScan(result.getText());\n            }\n        });\n    }\n\n    render(): React.ReactNode {\n        return this.state.devices.length ?\n            <video id='video' style={{height: '100%', width: '100%', objectFit: 'cover'}}/> :\n            <div className={styles.error}>\n                No camera found\n            </div>;\n    }\n}\n\nexport default Scanner;",{"ruleId":"65","severity":1,"message":"66","line":6,"column":9,"nodeType":"67","messageId":"68","endLine":6,"endColumn":22},{"ruleId":"65","severity":1,"message":"69","line":6,"column":24,"nodeType":"67","messageId":"68","endLine":6,"endColumn":32},{"ruleId":"65","severity":1,"message":"70","line":6,"column":34,"nodeType":"67","messageId":"68","endLine":6,"endColumn":39},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"65","severity":1,"message":"75","line":1,"column":16,"nodeType":"67","messageId":"68","endLine":1,"endColumn":25},{"ruleId":"76","severity":1,"message":"77","line":41,"column":17,"nodeType":"78","endLine":41,"endColumn":67},{"ruleId":"65","severity":1,"message":"70","line":4,"column":25,"nodeType":"67","messageId":"68","endLine":4,"endColumn":30},{"ruleId":"65","severity":1,"message":"79","line":6,"column":8,"nodeType":"67","messageId":"68","endLine":6,"endColumn":16},{"ruleId":"76","severity":1,"message":"77","line":46,"column":21,"nodeType":"78","endLine":46,"endColumn":71},{"ruleId":"80","severity":1,"message":"81","line":23,"column":37,"nodeType":"82","messageId":"83","endLine":23,"endColumn":39},{"ruleId":"80","severity":1,"message":"81","line":50,"column":37,"nodeType":"82","messageId":"83","endLine":50,"endColumn":39},{"ruleId":"80","severity":1,"message":"81","line":53,"column":42,"nodeType":"82","messageId":"83","endLine":53,"endColumn":44},{"ruleId":"76","severity":1,"message":"77","line":72,"column":13,"nodeType":"78","endLine":72,"endColumn":69},{"ruleId":"76","severity":1,"message":"77","line":32,"column":9,"nodeType":"78","endLine":32,"endColumn":54},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"84","severity":1,"message":"85","line":2,"column":9,"nodeType":"67","messageId":"68","endLine":2,"endColumn":17},{"ruleId":"84","severity":1,"message":"86","line":2,"column":19,"nodeType":"67","messageId":"68","endLine":2,"endColumn":28},{"ruleId":"84","severity":1,"message":"87","line":2,"column":9,"nodeType":"67","messageId":"68","endLine":2,"endColumn":22},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'Route' is defined but never used.","no-native-reassign",["88"],"no-negated-in-lhs",["89"],"'Component' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ReactDOM' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'useState' is defined but never used.","'useEffect' is defined but never used.","'BarcodeFormat' is defined but never used.","no-global-assign","no-unsafe-negation"]